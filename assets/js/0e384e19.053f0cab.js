"use strict";(self.webpackChunkmongoose_relay_paginate=self.webpackChunkmongoose_relay_paginate||[]).push([[671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=u(n),m=a,d=c["".concat(s,".").concat(m)]||c[m]||g[m]||o;return n?r.createElement(d,l(l({ref:t},p),{},{components:n})):r.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<o;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>g,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=n(3117),a=(n(7294),n(3905));const o={sidebar_position:1},l="Intro",i={unversionedId:"intro",id:"intro",title:"Intro",description:"What",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/mongoose-relay-paginate/docs/intro",draft:!1,editUrl:"https://github.com/johnsonjo4531/mongoose-relay-paginate/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"aggregateRelayPaginate()",permalink:"/mongoose-relay-paginate/docs/API/aggregateRelayPaginate"}},s={},u=[{value:"What",id:"what",level:2},{value:"Why",id:"why",level:2},{value:"FAQ",id:"faq",level:3},{value:"How",id:"how",level:2},{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2}],p={toc:u},c="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"intro"},"Intro"),(0,a.kt)("h2",{id:"what"},"What"),(0,a.kt)("p",null,"This library is meant to allow cursor based pagination between the client and the server."),(0,a.kt)("h2",{id:"why"},"Why"),(0,a.kt)("p",null,"Because no existing pagination for mongoose that I can find was all of the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Well tested"),(0,a.kt)("li",{parentName:"ul"},"Optimized"),(0,a.kt)("li",{parentName:"ul"},"Cursor based"),(0,a.kt)("li",{parentName:"ul"},"Relay Compatible")),(0,a.kt)("h3",{id:"faq"},"FAQ"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Q")," Doesn't MongoDB already have a built-in cursoring mechanism, why reinvent the wheel?"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"A")," Yes it does already have one, but that is meant to be used between the server and the database where as this library provides the cursoring/paging to be done between the client and the server."),(0,a.kt)("h2",{id:"how"},"How"),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)("p",null,"To use this library first install in your project, like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i mongoose-relay-paginate\n")),(0,a.kt)("p",null,"Then you need to register the plugin sometime before you create your models see ",(0,a.kt)("a",{parentName:"p",href:"https://mongoosejs.com/docs/plugins.html#global"},"mongoose's global plugins documentation")," for help:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { plugin, Model, model, Schema } from "mongoose";\nimport { relayPaginatePlugin } from "mongoose-relay-paginate";\n\n// 0. Register the relay paginate plugins.\nplugin(\n  relayPaginatePlugin({\n    // Send in options\n    maxLimit: 100,\n  })\n);\n\n// 1. Create an interface representing a document in MongoDB.\ninterface User {\n  _id: mongoose.Types.ObjectId;\n  myId: number;\n  name: string;\n  email: string;\n  avatar?: string;\n}\n\n// 2. Setup various types.\ninterface UserQueryHelpers {}\n\ninterface UserMethods {}\n\ntype MyUserMethods = UserMethods;\n\ntype MyQueryHelpers = UserQueryHelpers & RelayPaginateQueryHelper;\n\ntype UserModel = Model<User, MyQueryHelpers, MyUserMethods> &\n  RelayPaginateStatics;\n\n// 3. Create a Schema corresponding to the document interface.\nconst schema = new Schema<User, UserModel, MyUserMethods>({\n  myId: Number,\n  name: { type: String, required: true },\n  email: { type: String, required: true },\n  avatar: String,\n});\n\n// 4. Create your Model.\nconst UserModel = model<User, UserModel>("User", schema);\n')),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"Now the relayPaginate should be available on your model's mongoose queries, so you can use it as shown below."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const result = await UserModel.find()\n  // sorting by id from largest (most recent)--\x3e to smallest (most early) using mongoose's default sort.\n  .sort({ _id: -1 })\n  // This library's `relayPaginate` can now be used off your query\n  // after the above setup.\n  .relayPaginate({\n    first: 1,\n  });\n")),(0,a.kt)("p",null,"Or use an aggregate query off of your model:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const result = await UserModel\n  // sorting by id from largest--\x3esmallest using mongoose's default sort.\n  .aggregateRelayPaginate([{ $sort: { _id: 1 } }], {\n    first: 1,\n  });\n")),(0,a.kt)("p",null,"For more details view the ",(0,a.kt)("a",{parentName:"p",href:"https://johnsonjo4531.github.io/mongoose-relay-paginate/"},"docs"),"."))}g.isMDXComponent=!0}}]);