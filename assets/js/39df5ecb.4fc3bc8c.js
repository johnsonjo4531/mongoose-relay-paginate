"use strict";(self.webpackChunkmongoose_relay_paginate=self.webpackChunkmongoose_relay_paginate||[]).push([[316],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>g});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=t.createContext({}),c=function(e){var n=t.useContext(i),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},p=function(e){var n=c(e.components);return t.createElement(i.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(r),d=a,g=m["".concat(i,".").concat(d)]||m[d]||u[d]||o;return r?t.createElement(g,s(s({ref:n},p),{},{components:r})):t.createElement(g,s({ref:n},p))}));function g(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var l={};for(var i in n)hasOwnProperty.call(n,i)&&(l[i]=n[i]);l.originalType=e,l[m]="string"==typeof e?e:a,s[1]=l;for(var c=2;c<o;c++)s[c]=r[c];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},3298:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=r(3117),a=(r(7294),r(3905));const o={},s="Serverless Example",l={unversionedId:"examples/serverless-example",id:"examples/serverless-example",title:"Serverless Example",description:"",source:"@site/docs/examples/serverless-example.md",sourceDirName:"examples",slug:"/examples/serverless-example",permalink:"/mongoose-relay-paginate/docs/examples/serverless-example",draft:!1,editUrl:"https://github.com/johnsonjo4531/mongoose-relay-paginate/tree/main/packages/create-docusaurus/templates/shared/docs/examples/serverless-example.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GraphQL Server Example",permalink:"/mongoose-relay-paginate/docs/examples/graphql-example"},next:{title:"Paging with Cursors",permalink:"/mongoose-relay-paginate/docs/paging"}},i={},c=[],p={toc:c},m="wrapper";function u(e){let{components:n,...r}=e;return(0,a.kt)(m,(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"serverless-example"},"Serverless Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import {\n  RelayPaginateStatics,\n  RelayPaginateQueryHelper,\n  alterNodeOnResult,\n  relayPaginate,\n  relayPaginatePlugin,\n} from "mongoose-relay-paginate";\nimport { Schema, model, connect, Model, plugin } from "mongoose";\nimport mongoose from "mongoose";\n// Connection url\nconst url = "mongodb://localhost:32782";\n// Database Name\nconst dbName = "mongo-relay-connection";\n\n// 0. Register the relay paginate plugins.\nplugin(\n  relayPaginatePlugin({\n    // Send in options\n    maxLimit: 100,\n  })\n);\n\n// 1. Create an interface representing a document in MongoDB.\ninterface User {\n  _id: mongoose.Types.ObjectId;\n  myId: number;\n  name: string;\n  email: string;\n  avatar?: string;\n}\n\n// 2. Setup various types.\ninterface UserQueryHelpers {}\n\ninterface UserMethods {}\n\ntype MyUserMethods = UserMethods;\n\ntype MyQueryHelpers = UserQueryHelpers & RelayPaginateQueryHelper;\n\ntype UserModel = Model<User, MyQueryHelpers, MyUserMethods> &\nRelayPaginateStatics;\n\n// 3. Create a Schema corresponding to the document interface.\nconst schema = new Schema<User, UserModel, MyUserMethods>({\n  myId: Number,\n  name: { type: String, required: true },\n  email: { type: String, required: true },\n  avatar: String,\n});\n\n// 4. Create your Model.\nconst UserModel = model<User, UserModel>("User", schema);\n\n\nasync function run(): Promise<void> {\n    // 4. Connect to MongoDB\n    const client = await connect(url, {\n        dbName,\n    });\n\n    const doc = new UserModel({\n        myId: 1,\n        name: "Bill",\n        email: "bill@example.com",\n        avatar: "https://i.imgur.com/dM7Thhn.png",\n    });\n\n    const doc2 = new UserModel({\n        myId: 2,\n        name: "Jill",\n        email: "jill@example.com",\n        avatar: "https://i.imgur.com/dM7Thhn.png",\n    });\n\n    const doc3 = new UserModel({\n        myId: 3,\n        name: "Phill",\n        email: "Phill@example.com",\n        avatar: "https://i.imgur.com/dM7Thhn.png",\n    });\n    await doc.save();\n    await doc2.save();\n    await doc3.save();\n\n\n  const result = await UserModel.find()\n            .sort({ name: -1 })\n            .relayPaginate({\n                first: 1,\n            });\n\n  console.log(result.nodes); // Will be any array of just Phill\'s object\n}\n')))}u.isMDXComponent=!0}}]);