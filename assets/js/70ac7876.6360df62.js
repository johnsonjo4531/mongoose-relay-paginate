"use strict";(self.webpackChunkmongoose_relay_paginate=self.webpackChunkmongoose_relay_paginate||[]).push([[664],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=s(t),d=o,f=p["".concat(c,".").concat(d)]||p[d]||u[d]||a;return t?r.createElement(f,i(i({ref:n},m),{},{components:t})):r.createElement(f,i({ref:n},m))}));function d(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=p;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},3716:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=t(7462),o=t(3366),a=(t(7294),t(3905)),i=["components"],l={sidebar_position:4},c="Full Example",s={unversionedId:"full-example",id:"full-example",title:"Full Example",description:"",source:"@site/docs/full-example.md",sourceDirName:".",slug:"/full-example",permalink:"/mongoose-relay-paginate/docs/full-example",editUrl:"https://github.com/johnsonjo4531/mongoose-relay-paginate/tree/main/packages/create-docusaurus/templates/shared/docs/full-example.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Paging with Cursors",permalink:"/mongoose-relay-paginate/docs/paging"}},m={},u=[],p={toc:u};function d(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"full-example"},"Full Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'import { alterNodeOnResult, relayPaginate } from "..";\nimport { Schema, model, connect } from "mongoose";\nimport { ObjectId } from "mongodb";\nimport mongoose from "mongoose";\n// Connection url\nconst url = "mongodb://localhost:32782";\n// Database Name\nconst dbName = "mongo-relay-connection";\n\n// 1. Create an interface representing a document in MongoDB.\ninterface User {\n    myId: number;\n    name: string;\n    email: string;\n    avatar?: string;\n}\n\n// 2. Create a Schema corresponding to the document interface.\nconst schema = new Schema<User>({\n    myId: Number,\n    name: { type: String, required: true },\n    email: { type: String, required: true },\n    avatar: String,\n});\n\n// 3. Create a Model.\nconst UserModel = model<User>("User", schema);\n\nasync function run(): Promise<void> {\n    // 4. Connect to MongoDB\n    const client = await connect(url, {\n        dbName,\n    });\n\n    const doc = new UserModel({\n        myId: 1,\n        name: "Bill",\n        email: "bill@example.com",\n        avatar: "https://i.imgur.com/dM7Thhn.png",\n    });\n\n    const doc2 = new UserModel({\n        myId: 2,\n        name: "Jill",\n        email: "jill@example.com",\n        avatar: "https://i.imgur.com/dM7Thhn.png",\n    });\n\n    const doc3 = new UserModel({\n        myId: 3,\n        name: "Phill",\n        email: "Phill@example.com",\n        avatar: "https://i.imgur.com/dM7Thhn.png",\n    });\n    await doc.save();\n    await doc2.save();\n    await doc3.save();\n\n\n  const result = await UserModel.find()\n            .sort({ name: -1 })\n            .relayPaginate({\n                first: 1,\n            });\n\n  console.log(result.nodes); // Will be any array of just Phill\'s object\n}\n')))}d.isMDXComponent=!0}}]);